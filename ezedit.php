<?php

#die("Not authorized");
new EzEdit();

class EzEdit
{
var $editor_code;
var $configuration = array(
	'plugin' => null, // plugin == null => use the built-in code, which handles simple html sites
	'index' => 'index.html', // plugin == null => use this as default index page
	'path' => './',
	'username' => 'admin', // Change this!
	'password' => 'password', // Change _at least_ this!
);

	/*
	 * Register callback hooks: called by plugins when registering
	 * Public
	 */
	function register_hook($key, $callback) {
		$this->configuration['hook_' . $key] = $callback;
	}

	/*
	 * Old PHP4-compatible constructor
	 * Public
	 */
	function EzEdit() {
		$this->_init();
		// Retrieving javascript editor source code?
		if(isset($_GET['editor'])) {
			echo base64_decode($this->editor_code);
			exit;
		}
		// Retrieving toolbar image?
		if(isset($_GET['toolbar'])) {
			header('Content-Type: image/gif');
			echo base64_decode($this->toolbar_bin);
			exit;
		}
		// Attempting to rewrite a page?
		if(isset($_POST['q'])) {
			if(!isset($_POST['p'])) {
				die("No page name provided");
			}
			$file_name = call_user_func_array($this->configuration['hook_getfile'], array($_POST['p']));
			if(isset($_POST['b'])) {
				if(!isset($_POST['l'])) {
					die("No bit length provided");
				}
				call_user_func_array($this->configuration['hook_savefile'], array($file_name, $_POST['q'], $_POST['b'], $_POST['l']));
			}
			else {
				call_user_func_array($this->configuration['hook_savefile'], array($file_name, $_POST['q']));
			}
			echo "Updated $file_name";
			exit;
		}
		// Authenticating?
		if(isset($_POST['u']) && isset($_POST['p'])) {
			call_user_func_array($this->configuration['hook_authenticate'], array($_POST['u'], $_POST['p']));
			$_SESSION['_ez_sid'] = '298732897'; // TODO
			echo $_SESSION['_ez_sid'];
			exit;
		}
		// Retrieving something?
		if(isset($_POST['g'])) {
			switch($_POST['g']) {
				case 'sid':
					if(!empty($_SESSION['_ez_sid'])) {
						echo $_SESSION['_ez_sid'];
						exit;
					}
					die('*');
			}
		}
		// Doing something?
		if(isset($_POST['a'])) {
			switch($_POST['a']) {
				case 'logout':
					unset($_SESSION['_ez_sid']);
					exit;
			}
		}
	}

	/*
	 * Cleanup html code: remove own javascript, and code added by browser
	 * Private
	 */
	function _cleanup($html) {
		// Some browsers such as Chrome can misbehave a bit and inject their own code
		// before the <head> tag...
		$p = stripos($html, '<head>');
		if($p === false) {
			return $html;
		}
		$out = substr($html, $p);
		// That's not all: we also tend to add our own scripting stuff...
		$out = preg_replace('/<script.+?ezedit\.php\?editor.+?script>/i', '', $out);
		return $out;
	}

	/*
	 * Register local callbacks,
	 * then give any potential registered plugin a chance to override these callbacks
	 * Private
	 */
	function _register_plugin() {
		$this->register_hook('getfile', array($this, 'default_get_file'));
		$this->register_hook('savefile', array($this, 'default_save_file'));
		$this->register_hook('authenticate', array($this, 'default_authenticate'));

		if($this->configuration['plugin'] != null) {
			require $this->configuration['plugin'];
		}
	}

	/*
	 * Check for existence of a configuration file and retrieve its content
	 * Use said content to override default configuration
	 * Private
	 */
	function _read_configuration_file() {
		$fileName = 'ezedit.conf.html';
		if(!file_exists($fileName)) {
			return;
		}
		$conf = file($fileName, FILE_USE_INCLUDE_PATH | FILE_SKIP_EMPTY_LINES | FILE_IGNORE_NEW_LINES);
		foreach($conf as $ln => $line) {
			list($key, $value) = preg_split('/[\s]*[=][\s]*/', $line);
			$this->configuration[$key] = $value;
		}
	}

#########################################################
# Default plugin code...overriden by registered plugins #
#########################################################

	/*
	 * Default plugin call-back to extract file name from page name
	 */
	function default_get_file($pageName) {
		if(empty($pageName)) {
			$pageName = $this->configuration['index'];
		}
		return $this->configuration['path'] . $pageName;
	}

	/*
	 * Default plugin call-back to rewrite a file with new content
	 */
	function default_save_file($fileName, $content, $id = false, $oldLength = false) {
		if(!@is_writable($fileName)) {
			die("Sorry, $fileName is not writable");
		}
		if(false === $id) {
			// Write a whole page
			$html = "<html>\n" . $this->_cleanup($content) . "\n</html>";
			// TODO Grab doctype and save that as well
		}
		else {
			// Write a bit
			$html = @file_get_contents($fileName);
			if(!$html) {
				die("Sorry, unable to read $fileName");
			}
			$begin = strpos($html, 'id="' . $id . '"');
			if(!$begin) {
				$begin = strpos($html, "id='" . $id . "'");
			}
			if(!$begin) {
				die("Sorry, unable to find id $id in page $pageName");
			}
			$hlen = strlen($html);
			for($i=$begin; $i<$hlen; $i++) {
				if($html[$i] == '>') {
					$begin = $i;
					break;
				}
			}
			if($i == $hlen) {
				die("Sorry, unable to find end of element opening token");
			}
			$i ++;
			$html = substr($html, 0, $i) . $content . substr($html, $i + $oldLength);
		}
		$f = @fopen($fileName, 'w');
		if(!$f || !@fputs($f, $html)) {
			die("Sorry, unable to write $fileName");
		}
		@fclose($f);
	}

	/*
	 * Default plugin call-back to authenticate a user based on username + password
	 */
	function default_authenticate($username, $password) {
		if($this->configuration['password'] == 'password') {
			die("Sorry, you need to change your username and password in ezedit.php");
		}
		if($username != $this->configuration['username'] || $password != $this->configuration['password']) {
			die("Sorry, wrong credentials");
		}
	}

	/*
	 * Init function: check for config. file, register plugins, start session, store js code + assets
	 * Private
	 */
	function _init() {
		$this->_read_configuration_file();
		$this->_register_plugin();
		session_start();
######################################################
# Generated code goes below this line: do not modify #
######################################################
//
		$this->editor_code = <<<EOEC

EOEC;
		$this->toolbar_bin = <<<EOEC
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
EOEC;
}}
